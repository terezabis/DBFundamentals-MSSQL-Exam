USE AMS
GO

-- Section 1: Data Definition

CREATE TABLE Flights
(
FlightID INT PRIMARY KEY,
DepartureTime DATETIME NOT NULL,
ArrivalTime DATETIME NOT NULL,
[Status] VARCHAR(9) NOT NULL CHECK ([Status] = 'Departing' OR [Status] = 'Delayed' OR
									[Status] = 'Arrived' OR [Status] = 'Cancelled'),
OriginAirportID INT,
DestinationAirportID INT,
AirlineID INT
CONSTRAINT FK_Flights_Aiports FOREIGN KEY (OriginAirportID) REFERENCES Airports(AirportID),
CONSTRAINT FK_Flights_Aiports_Dest FOREIGN KEY (DestinationAirportID) REFERENCES Airports(AirportID),
CONSTRAINT FK_Flights_Airlines FOREIGN KEY (AirlineID) REFERENCES Airlines(AirlineID)
)

CREATE TABLE Tickets
(
TicketID INT PRIMARY KEY,
Price DECIMAL(8,2) NOT NULL,
Class VARCHAR(6) NOT NULL CHECK (Class = 'First' OR Class = 'Second' OR Class = 'Third'),
Seat VARCHAR(5) NOT NULL,
CustomerID INT,
FlightID INT
CONSTRAINT FK_Tickets_Customers FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
CONSTRAINT FK_Tickets_Flights FOREIGN KEY (FlightID) REFERENCES Flights(FlightID)
)

-- Section 2: Database Manipulations
-- Task 1: Data Insertion

INSERT INTO Flights (FlightID, DepartureTime, ArrivalTime, Status, OriginAirportID, DestinationAirportID, AirlineID)
VALUES
(1,	'2016-10-13 06:00 AM',	'2016-10-13 10:00 AM',	'Delayed',		1,	4,	1),
(2,	'2016-10-12 12:00 PM',	'2016-10-12 12:01 PM',	'Departing',	1,	3,	2),
(3,	'2016-10-14 03:00 PM',	'2016-10-20 04:00 AM',	'Delayed',		4,	2,	4),
(4,	'2016-10-12 01:24 PM',	'2016-10-12 04:31 PM',	'Departing',	3,	1,	3),
(5,	'2016-10-12 08:11 AM',	'2016-10-12 11:22 PM',	'Departing',	4,	1,	1),
(6,	'1995-06-21 12:30 PM',	'1995-06-22 08:30 PM',	'Arrived',		2,	3,	5),
(7,	'2016-10-12 11:34 PM',	'2016-10-13 03:00 AM',	'Departing',	2,	4,	2),
(8,	'2016-11-11 01:00 PM',	'2016-11-12 10:00 PM',	'Delayed',		4,	3,	1),
(9,	'2015-10-01 12:00 PM',	'2015-12-01 01:00 AM',	'Arrived',		1,	2,	1),
(10,'2016-10-12 07:30 PM',	'2016-10-13 12:30 PM',	'Departing',	2,	1,	7)

INSERT INTO Tickets (TicketID, Price, Class, Seat, CustomerID, FlightID)
VALUES
(1,	3000.00,	'First',	'233-A',	3,	8),
(2,	1799.90,	'Second',	'123-D',	1,	1),
(3,	1200.50,	'Second',	'12-Z',		2,	5),
(4,	410.68,		'Third',	'45-Q',		2,	8),
(5,	560.00,		'Third',	'201-R',	4,	6),
(6,	2100.00,	'Second',	'13-T',		1,	9),
(7,	5500.00,	'First',	'98-O',		2,	7)

-- Task 2: Update Arrived Flights

UPDATE Flights
SET AirlineID = 1
WHERE [Status] = 'Arrived'

-- Task 3: Update Tickets
UPDATE Tickets
SET Price *= 1.5
WHERE FlightID IN (SELECT f.FlightID
					FROM Flights f
					INNER JOIN Airlines a
					ON f.AirlineID = a.AirlineID
					WHERE a.AirlineID = (SELECT TOP 1 AirlineID 
										 FROM Airlines 
										 ORDER BY Rating DESC))

-- Task 4: Table Creation

CREATE TABLE CustomerReviews
(
ReviewID INT PRIMARY KEY,
ReviewContent VARCHAR(255) NOT NULL,
ReviewGrade INT CHECK (ReviewGrade BETWEEN 0 AND 10),
AirlineID INT,
CustomerID INT
CONSTRAINT FK_CustomerReviews_Airlines FOREIGN KEY (AirlineID) REFERENCES Airlines (AirlineID),
CONSTRAINT FK_CustomerReviews_Customers FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
)

CREATE TABLE CustomerBankAccounts
(
AccountID INT PRIMARY KEY,
AccountNumber VARCHAR(10) NOT NULL UNIQUE,
Balance DECIMAL(10,2) NOT NULL,
CustomerID INT
CONSTRAINT FK_CustomerBankAccounts_Customers FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
)

-- Task 5: Fill the new Tables with Data

INSERT INTO CustomerReviews (ReviewID, ReviewContent, ReviewGrade, AirlineID, CustomerID)
VALUES
(1,	'Me is very happy. Me likey this airline. Me good.', 10, 1,	1),
(2,	'Ja, Ja, Ja… Ja, Gut, Gut, Ja Gut! Sehr Gut!', 10,	1,	4),
(3,	'Meh…',	5,	4,	3),
(4,	'Well Ive seen better, but Ive certainly seen a lot worse…',	7,	3,	5)

INSERT INTO CustomerBankAccounts (AccountID, AccountNumber, Balance, CustomerID)
VALUES
(1,	'123456790'	, 2569.23,	1),
(2,	'18ABC23672', 14004568.23,	2),
(3,	'F0RG0100N3', 19345.20,	5)

-- Section 3: Querying
-- Task 1: Extract All Tickets

SELECT TicketID, Price, Class, Seat
FROM Tickets
ORDER BY TicketID

-- Task 2: Extract All Customers 

SELECT CustomerID, CONCAT(FirstName, ' ', LastName) AS FullName, Gender
FROM Customers
ORDER BY FullName, CustomerID

-- Task 3: Extract Delayed Flights 

SELECT FlightID, DepartureTime, ArrivalTime
FROM Flights
WHERE Status = 'Delayed'
ORDER BY FlightID

-- Task 4: Extract Top 5 Most Highly Rated Airlines which have any Flights
SELECT DISTINCT TOP 5  a.AirlineID, a.AirlineName, a.Nationality, a.Rating
FROM Airlines a
INNER JOIN Flights f
ON a.AirlineID = f.AirlineID
ORDER BY Rating DESC, AirlineID

-- Task 5: Extract all Tickets with price below 5000, for First Class

SELECT t.TicketID, ap.AirportName AS Destination, CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName
FROM Tickets t
INNER JOIN Flights f
ON t.FlightID = f.FlightID
INNER JOIN Airports ap
ON f.DestinationAirportID = ap.AirportID
INNER JOIN Customers c
ON t.CustomerID = c.CustomerID
WHERE t.Price < 5000
AND t.Class = 'First'
ORDER BY t.TicketID

-- Task 6: Extract all Customers which are departing from their Home Town

SELECT DISTINCT c.CustomerID, CONCAT(c.FirstName, ' ', c.LastName) AS FullName, t.TownName AS HomeTown
FROM Customers c
INNER JOIN Tickets ti
ON c.CustomerID = ti.CustomerID
INNER JOIN Flights f
ON ti.FlightID = f.FlightID
INNER JOIN Airports a
ON f.DestinationAirportID = a.AirportID
INNER JOIN Towns t
ON c.HomeTownID = t.TownID
WHERE a.TownID = c.HomeTownID

-- Task 7: Extract all Customers which will fly

SELECT DISTINCT c.CustomerID,  CONCAT(c.FirstName, ' ', c.LastName) AS FullName, DATEDIFF(YEAR, c.DateOfBirth, '2016') AS Age
FROM Customers c
INNER JOIN Tickets t
ON c.CustomerID = t.CustomerID
INNEr JOIN Flights f
ON t.FlightID = f.FlightID
WHERE f.Status = 'Departing'
ORDER BY Age, c.CustomerID

		
-- Task 8: Extract Top 3 Customers which have Delayed Flights

SELECT TOP 3 c.CustomerID,  CONCAT(c.FirstName, ' ', c.LastName) AS FullName, t.Price AS TicketPrice, a.AirportName AS Destination
FROM Customers c
INNER JOIN Tickets t
ON c.CustomerID = t.CustomerID
INNER JOIN Flights f
ON t.FlightID = f.FlightID
INNER JOIN Airports a
ON f.DestinationAirportID = a.AirportID
WHERE f.Status = 'Delayed'
ORDER BY t.Price DESC, c.CustomerID

-- Task 9: Extract the Last 5 Flights, which are departing.

SELECT TOP 5 f.FlightID, f.DepartureTime, f.ArrivalTime, ai.AirportName, a.AirportName
FROM Flights f
INNER JOIN Airports a
ON f.DestinationAirportID = a.AirportID
INNER JOIN Airports ai
ON f.OriginAirportID = ai.AirportID
WHERE f.Status = 'Departing'
ORDER BY f.DepartureTime, f.FlightID

-- Task 10: Extract all Customers below 21 years, which have already flew at least once
SELECT c.CustomerID,  CONCAT(c.FirstName, ' ', c.LastName) AS FullName,  DATEDIFF(YEAR, c.DateOfBirth, '2016') AS Age
FROM Customers c
INNER JOIN Tickets t
ON c.CustomerID = t.CustomerID
INNER JOIN Flights f
ON t.FlightID = f.FlightID
WHERE DATEDIFF(YEAR, c.DateOfBirth, '2016') < 21
AND f.Status = 'Arrived'
ORDER BY Age DESC, c.CustomerID

-- Task 11: Extract all Airports and the Count of People departing from them
SELECT  a.AirportID, a.AirportName, COUNT(t.TicketID) AS Passengers
FROM Airports a
INNER JOIN Flights f
ON a.AirportID = f.OriginAirportID
--OR a.AirportID = f.DestinationAirportID
INNER JOIN Tickets t
ON f.FlightID = t.FlightID
WHERE f.Status = 'Departing'
GROUP BY a.AirportID, a.AirportName
HAVING COUNT(t.TicketID) > 0
ORDER BY a.AirportID

-- Section 4: Programmability
-- Task 1: Review Registering Procedure

CREATE PROCEDURE usp_SubmitReview (@CustomerID INT, @ReviewContent VARCHAR(255), 
									@ReviewGrade INT, @AirlineName VARCHAR(30))
AS
BEGIN
	DECLARE @id INT
	SET @id = (SELECT TOP 1 ReviewID FROM CustomerReviews ORDER BY ReviewID DESC) + 1

	BEGIN TRAN 
	INSERT INTO CustomerReviews (ReviewID, ReviewContent, ReviewGrade, AirlineID, CustomerID)
	VALUES (@id, @ReviewContent, @ReviewGrade, (SELECT a.AirlineID FROM Airlines a WHERE a.AirlineName = @AirlineName), @CustomerID)

	IF @AirlineName NOT IN (SELECT a.AirlineName FROM Airlines a)
	BEGIN
		ROLLBACK
		RAISERROR ('Airline does not exist.', 16, 1)
	END

	COMMIT;
END


-- Task 2: Ticket Purchase Procedure

CREATE PROCEDURE usp_PurchaseTicket (@CustomerID INT, @FlightID INT, @TicketPrice DECIMAL(8,2), 
									@Class VARCHAR(6), @Seat VARCHAR(5))
AS
BEGIN
	DECLARE @id INT
	SET @id = (SELECT TOP 1 TicketID FROM Tickets ORDER BY TicketID DESC) + 1

	BEGIN TRAN
	INSERT INTO Tickets (TicketID, Price, Class, Seat, CustomerID, FlightID)
	VALUES (@id, @TicketPrice, @Class, @Seat, @CustomerID, @FlightID)

	IF @TicketPrice > (SELECT Balance FROM CustomerBankAccounts WHERE CustomerID = @CustomerID)
	BEGIN
		ROLLBACK
		RAISERROR ('Insufficient bank account balance for ticket purchase.', 16, 1)
	END
	ELSE
	BEGIN
		COMMIT;
		UPDATE CustomerBankAccounts
		SET Balance -= @TicketPrice
		WHERE CustomerID = @CustomerID
	END
END

-- Section 5 (BONUS): Update Trigger

CREATE TABLE ArrivedFlights
(
FlightID INT PRIMARY KEY,
ArrivalTime DATETIME NOT NULL,
Origin VARCHAR(50) NOT NULL,
Destination VARCHAR(50) NOT NULL,
Passengers INT NOT NULL
)

CREATE TRIGGER tr_LogAccount
ON Flights
AFTER UPDATE
AS
BEGIN
	
END
